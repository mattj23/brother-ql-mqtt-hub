@page "/categories"
@implements IDisposable
@using System.Threading
@using BrotherQlHub.Server.Services
@using BrotherQlHub.Server.ViewModels
@using BrotherQlHub.Server.Components
@using System.Reactive.Linq
@inject CategoryManager catManager
@inject IDialogService dialogService

<MudElement Class="d-flex flex-row">
    <MudText Typo="Typo.h5" Class="mt-3 mr-3">Categories</MudText>
    <MudButton OnClick="AddNewCategory">
        <MudIcon Icon="@Icons.Filled.Add"></MudIcon>
    </MudButton>
</MudElement>

@foreach (var c in categories)
{
    <CategoryEditor Category="c"
                    Delete="() => DeleteCategory(c)"
                    Update="Refresh" />
    <br />
}


@code {
    protected List<ICategoryView> categories;
    protected IDisposable updateSubscription;


    protected override async Task OnInitializedAsync()
    {
        categories = new List<ICategoryView>();
        await Refresh();

        updateSubscription = catManager.CategoryUpdates
            .ObserveOn(SynchronizationContext.Current!)
            .Subscribe(ReceiveUpdate);

    }

    protected async Task Refresh()
    {
        var current = await catManager.GetCategories();
        categories.Clear();
        categories.AddRange(current);
        StateHasChanged();
    }

    private void ReceiveUpdate(ItemUpdate<ICategoryView> update)
    {
        categories.Remove(categories.Find(c => c.Id == update.Item.Id));
        if (!update.IsDelete)
        {
            categories.Add(update.Item);
            categories.Sort((a, b) => String.Compare(a.Name, b.Name, StringComparison.Ordinal));
        }
        StateHasChanged();
    }

    private async void AddNewCategory()
    {
        await catManager.AddCategory();

        await Refresh();
    }

    private async Task DeleteCategory(ICategoryView cat)
    {
        var result = await dialogService.ShowMessageBox("Confirm Delete Category", 
            $"Are you sure you want to remove the category '{cat.Name}'?", 
            yesText:"Yes", noText:"No");
        
        if (result == true)
        {
            await catManager.DeleteCategory(cat.Id);
            await Refresh();
        }
    }

    public void Dispose()
    {
        updateSubscription?.Dispose();
    }

}
