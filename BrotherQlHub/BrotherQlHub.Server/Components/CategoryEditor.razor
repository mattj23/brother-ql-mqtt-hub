@using BrotherQlHub.Server.Services
@using BrotherQlHub.Server.ViewModels
@inject IDialogService _dialogs
@inject CategoryManager _categories

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@Category.Name</MudText>
            <MudText Typo="Typo.subtitle1">@Category.Description</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Filled.Edit"
                           OnClick="OnClickEdit" />
            <MudIconButton Icon="@Icons.Filled.Delete"
                           OnClick="OnClickDelete" />
        </CardHeaderActions>
    </MudCardHeader>
    
    <MudCardContent>
        <MudElement Class="d-flex flex-row">
            <MudText Typo="Typo.subtitle1" Style="font-weight: bold">Tags</MudText>
            <MudSpacer/>

            <MudIconButton Icon="@Icons.Filled.Add"
                           OnClick="AddNewTag">
            </MudIconButton>
        </MudElement>

        @foreach (var tag in Category.Tags)
        {
            <TagDisplay Tag="@tag"
                        OnUpdateTag="UpdateTag"
                        OnDeleteTag="DeleteTag"/>
        }
        
    </MudCardContent>


</MudCard>
@code {

    [Parameter]
    public ICategoryView Category { get; set; } = null!;

    [Parameter]
    public EventCallback Update { get; set; }

    [Parameter]
    public EventCallback Delete { get; set; }


    private async void DeleteTag(ITagView tag)
    {
        var result = await _dialogs.ShowMessageBox("Confirm Delete Tag", 
            $"Are you sure you want to remove the tag '{tag.Name}' from the category '{Category.Name}'?", 
            yesText:"Yes", noText:"No");
        if (result == true)
        {
            await _categories.DeleteTag(tag.Id);
            await Update.InvokeAsync();
        }
    }

    private async Task UpdateTag(Tuple<int, string> info)
    {
        await _categories.UpdateTag(info.Item1, info.Item2);

        await Update.InvokeAsync();
    }

    private async void AddNewTag()
    {
        var parameters = new DialogParameters { ["ToEdit"] = null };
        var dialog = _dialogs.Show<TagDialog>("Create New Tag", parameters);
        var result = await dialog.Result;
        if (result.Cancelled) return;

        var info = result.Data as TagDialog.Result;
        await _categories.AddTag(Category.Id, info.Name);
        await Update.InvokeAsync();
    }

    private void OnClickDelete()
    {
        Delete.InvokeAsync();
    }

    private async void OnClickEdit()
    {
        var parameters = new DialogParameters { ["ToEdit"] = Category };
        var dialog = _dialogs.Show<CategoryDialog>("Edit Category", parameters);
        var result = await dialog.Result;
        if (result.Cancelled) return;

        var info = result.Data as CategoryDialog.Result;
        
        await _categories.UpdateCategory(Category.Id, info.Name, info.Description);
    }

}
