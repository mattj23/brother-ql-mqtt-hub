@page "/categories"
@implements IDisposable
@using BrotherQlMqttHub.Data
@using BrotherQlMqttHub.Components
@using BrotherQlMqttHub.Services
@using BrotherQlMqttHub.ViewModels
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.DependencyInjection
@using System.Reactive.Linq
@using System.Threading
@using System.Diagnostics
@inject CategoryManager catManager
@inject DialogService dialogService

<h3>
    <span>Categories</span>
    <span>@pageId</span>

    <span>
        <RadzenButton Icon="add"
                      Click="AddNewCategory">
        </RadzenButton>
    </span>
</h3>

@foreach (var c in categories)
{
    <CategoryEditor Category="c"
                    Delete="() => DeleteCategory(c)"
                    Update="Refresh" />
    <br />
}


@code {
    protected List<ICategoryView> categories;
    protected IDisposable updateSubscription;

    protected int pageId;

    protected override async Task OnInitializedAsync()
    {
        pageId = new Random().Next();
        categories = new List<ICategoryView>();
        await Refresh();

        updateSubscription = catManager.CategoryUpdates
            .ObserveOn(SynchronizationContext.Current)
            .Subscribe(ReceiveUpdate);

    }

    protected async Task Refresh()
    {
        var current = await catManager.GetCategories();
        categories.Clear();
        categories.AddRange(current);
        StateHasChanged();
    }

    private void ReceiveUpdate(ItemUpdate<ICategoryView> update)
    {
        categories.Remove(categories.Find(c => c.Id == update.Item.Id));
        if (!update.IsDelete)
        {
            categories.Add(update.Item);
            categories.Sort((a, b) => String.Compare(a.Name, b.Name, StringComparison.Ordinal));
        }
        StateHasChanged();
    }

    private async void AddNewCategory()
    {
        await catManager.AddCategory();

        await Refresh();
    }

    private async Task DeleteCategory(ICategoryView cat)
    {
        var result = await dialogService.Confirm($"Are you sure you want to remove the category '{cat.Name}'?", "Confirm Delete Category");
        if (result == true)
        {
            await catManager.DeleteCategory(cat.Id);

            await Refresh();
        }
    }

    public void Dispose()
    {
        updateSubscription?.Dispose();
    }

}
