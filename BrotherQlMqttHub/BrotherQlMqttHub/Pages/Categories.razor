@page "/categories"
@using BrotherQlMqttHub.Data
@using BrotherQlMqttHub.Components
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.DependencyInjection
@inject IServiceScopeFactory scopeFactory
@inject DialogService dialogService

<h3>
    <span>Categories</span>

    <span>
        <RadzenButton Icon="add"
                      Click="AddNewCategory">
        </RadzenButton>
    </span>
</h3>

@foreach (var c in categories)
{
    <CategoryEditor Category="c"
                    Delete="() => DeleteCategory(c)"
                    Update="Refresh" />
    <br />
}


@code {
    protected List<TagCategory> categories;

    protected override async Task OnInitializedAsync()
    {
        categories = new List<TagCategory>();
        await Refresh();
        await base.OnInitializedAsync();
    }

    protected async Task Refresh()
    {
        using var scope = scopeFactory.CreateScope();
        var context = scope.ServiceProvider.GetService<PrinterContext>();
        categories.Clear();
        categories.AddRange(context.Categories.Include(c => c.Tags));
        StateHasChanged();
    }


    private async void AddNewCategory()
    {
        using var scope = scopeFactory.CreateScope();
        var context = scope.ServiceProvider.GetService<PrinterContext>();

        await context.Categories.AddAsync(new TagCategory
        {
            Name = "New Category",
            Description = "New category description"
        });

        await context.SaveChangesAsync();
        await Refresh();
    }

    private async Task DeleteCategory(TagCategory cat)
    {
        var result = await dialogService.Confirm($"Are you sure you want to remove the category '{cat.Name}'?", "Confirm Delete Category");
        if (result == true)
        {
            using var scope = scopeFactory.CreateScope();
            var context = scope.ServiceProvider.GetService<PrinterContext>();
            var target = await context.Categories
                .Include(c => c.Tags)
                .FirstAsync(c => c.Id == cat.Id);
            context.Categories.Remove(target);

            await context.SaveChangesAsync();

            await Refresh();
        }
    }

}
