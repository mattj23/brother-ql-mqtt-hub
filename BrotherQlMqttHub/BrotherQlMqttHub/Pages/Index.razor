@page "/"
@implements IDisposable
@using BrotherQlMqttHub.Services
@using BrotherQlMqttHub.ViewModels
@using Microsoft.Extensions.DependencyInjection
@using System.Reactive.Linq
@using System.Threading
@inject PrinterMonitor monitor
@inject CategoryManager catManager 

<h3>Brother QL Label Printer MQTT Hub</h3>

<p>
    This is a central hub for managing multiple Brother QL label printers connected through a central MQTT broker. 
    Printers can be assigned with tags that can be used by client services to discover them and send jobs to them.
</p>

@foreach (var p in _printers.Values.OrderBy(x => x.Serial))
{
    <RadzenCard>
        <div class="font-weight-bold">@p.Model (@p.Serial)</div>
        <div class="row">
            @if (p.IsOnline)
            {
                <div class="col">Online</div> 
                <div class="col">Media @p.MediaType</div> 
                <div class="col">@p.MediaWidth mm</div> 
            }
            else
            {
                <div class="col">Offline (last seen @p.LastSeen)</div>
            }
        </div>

        <table class="table table-borderless text-nowrap">
            @foreach (var cat in _categories.Values.OrderBy(c => c.Name))
            {
                <tr>
                    <td class="align-middle font-weight-bold">@cat.Name</td>
                    <td class="w-100 align-middle">
                        <RadzenDropDown TValue="ITagView"
                                        TextProperty="Name"
                                        Value="@_tagSelections[p.Serial][cat.Id]"
                                        Data="@_tagOptions[cat.Id]"
                                        />

                    </td>
                </tr>
            }
        </table>
    </RadzenCard>

    <br />
}


@code
{
    private Dictionary<string, PrinterViewModel> _printers;
    private Dictionary<int, List<ITagView>> _tagOptions;
    private Dictionary<string, Dictionary<int, ITagView>> _tagSelections;
    private Dictionary<int, ICategoryView> _categories;

    private IDisposable _printerUpdates;
    private IDisposable _categoryUpdates;


    protected override async Task OnInitializedAsync()
    {
        _tagOptions = new Dictionary<int, List<ITagView>>();
        _tagSelections = new Dictionary<string, Dictionary<int, ITagView>>();

        _printers = monitor.GetPrinters().ToDictionary(p => p.Serial, p => p);
        _printerUpdates = monitor.PrinterUpdates
            .ObserveOn(SynchronizationContext.Current)
            .Subscribe(ReceivePrinter);

        _categories = (await catManager.GetCategories()).ToDictionary(c => c.Id, c => c);
        _categoryUpdates = catManager.CategoryUpdates
            .ObserveOn(SynchronizationContext.Current)
            .Subscribe(ReceiveCategory);

        await UpdateEverything();

    }

    private async void ReceivePrinter(PrinterViewModel update)
    {
        _printers[update.Serial] = update;

        await UpdateEverything();
    }

    private async void ReceiveCategory(ItemUpdate<ICategoryView> update)
    {
        if (update.IsDelete)
        {
            _categories.Remove(update.Item.Id);
        }
        else
        {
            _categories[update.Item.Id] = update.Item;
        }

        await UpdateEverything();
    }

    private async Task UpdateEverything()
    {
        _tagOptions.Clear();
        foreach (var cat in _categories)
        {
            _tagOptions[cat.Value.Id] = cat.Value.ToOptions();
        }

        _tagSelections.Clear();
        foreach (var p in _printers.Values)
        {
            _tagSelections[p.Serial] = new Dictionary<int, ITagView>();

            foreach (var cat in _categories.Values)
            {
                int? selectedTagId = p.Tags.ContainsKey(cat.Id) ? (int?)p.Tags[cat.Id] : null;
                var selectedTag = _tagOptions[cat.Id][0];
                if (selectedTagId is not null)
                {
                    selectedTag = _tagOptions[cat.Id].First(t => t.Id == selectedTagId);

                }

                _tagSelections[p.Serial][cat.Id] = selectedTag;


            }

            
        }

        StateHasChanged();

    }

    public void Dispose()
    {
        _printerUpdates?.Dispose();
        _categoryUpdates?.Dispose();
    }
}
